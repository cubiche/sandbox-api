<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\Security\Domain\Tests\Units\User\Service;

use Sandbox\Security\Domain\Tests\Units\TestCase;
use Sandbox\Security\Domain\User\Service\Canonicalizer;
use Sandbox\Security\Domain\User\Service\PasswordEncoder;
use Sandbox\Security\Domain\User\Service\SaltGenerator;
use Sandbox\Security\Domain\User\Service\UserFactory;
use Sandbox\Security\Domain\User\User;

/**
 * UserFactoryTests class.
 *
 * Generated by TestGenerator on 2018-04-04 at 11:21:39.
 */
class UserFactoryTests extends TestCase
{
    /**
     * @return UserFactory
     */
    protected function createUserFactory()
    {
        $canonicalizer = new Canonicalizer();
        $passwordEncoder = new PasswordEncoder();
        $saltGenerator = new SaltGenerator();

        return new UserFactory($canonicalizer, $passwordEncoder, $saltGenerator);
    }

    /**
     * Test Create method.
     */
    public function testCreate()
    {
        $this
            ->given($userFactory = $this->createUserFactory())
            ->then()
                ->object(
                    $userFactory->create(
                        $this->faker->uuid,
                        'johnsnow',
                        'johnsnow',
                        'johnsnow@gameofthrones.com',
                        [$this->faker->uuid]
                    )
                )->isInstanceOf(User::class)
        ;
    }

    /**
     * Test EncodePassword method.
     */
    public function testEncodePassword()
    {
        $this
            ->given($userFactory = $this->createUserFactory())
            ->then()
                ->string($userFactory->encodePassword('123', '123')->toNative())
                    ->isNotEqualTo('123')
        ;
    }
}
