<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\Security\Application\Tests\Units\Role\ReadModel\Controller;

use Cubiche\Domain\Repository\QueryRepositoryInterface;
use Cubiche\Domain\System\StringLiteral;
use Sandbox\Core\Application\Tests\Units\SettingTokenContextTrait;
use Sandbox\Security\Application\Role\ReadModel\Controller\RoleController;
use Sandbox\Security\Application\Tests\Units\TestCase;
use Sandbox\Security\Domain\Role\ReadModel\Role;
use Sandbox\Security\Domain\Role\RoleId;

/**
 * RoleControllerTests class.
 *
 * Generated by TestGenerator on 2018-04-03 at 17:28:01.
 */
class RoleControllerTests extends TestCase
{
    use SettingTokenContextTrait;

    /**
     * @return RoleController
     */
    public function controller()
    {
        return new RoleController($this->queryBus());
    }

    /**
     * @return QueryRepositoryInterface
     */
    protected function repository()
    {
        return $this->queryRepository(Role::class);
    }

    /**
     * @return Role
     */
    protected function createRole()
    {
        return new Role(
            RoleId::next(),
            StringLiteral::fromNative($this->faker->name)
        );
    }

    /**
     * Test FindAllAction method.
     */
    public function testFindAllAction()
    {
        $this
            ->array(iterator_to_array($this->controller()->findAllAction()))
                ->isEmpty()
            ->and()
            ->when($this->repository()->persist($this->createRole()))
            ->and($this->repository()->persist($this->createRole()))
            ->then()
            ->array(iterator_to_array($this->controller()->findAllAction()))
                ->isNotEmpty()
                    ->hasSize(2)
        ;
    }

    /**
     * Test FindOneByIdAction method.
     */
    public function testFindOneByIdAction()
    {
        /* @var Role $role */
        $this
            ->given($role = $this->createRole())
            ->then()
                ->variable($this->controller()->findOneByIdAction($role->roleId()->toNative()))
                    ->isNull()
            ->when($this->repository()->persist($role))
                ->object($roleFound = $this->controller()->findOneByIdAction($role->roleId()->toNative()))
                    ->isInstanceOf(Role::class)
                ->string($roleFound->roleId()->toNative())
                    ->isEqualTo($role->roleId()->toNative())
        ;
    }

    /**
     * Test FindOneByNameAction method.
     */
    public function testFindOneByNameAction()
    {
        /* @var Role $role */
        $this
            ->given($role = $this->createRole())
            ->then()
                ->variable($this->controller()->findOneByNameAction($role->name()->toNative()))
                    ->isNull()
                ->and()
                ->when($this->repository()->persist($role))
                    ->object($roleFound = $this->controller()->findOneByNameAction($role->name()->toNative()))
                        ->isInstanceOf(Role::class)
                    ->string($roleFound->name()->toNative())
                        ->isEqualTo($role->name()->toNative())
        ;
    }
}
