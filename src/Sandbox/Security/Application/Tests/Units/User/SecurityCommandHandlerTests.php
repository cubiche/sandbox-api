<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\Security\Application\Tests\Units\User;

use Cubiche\Domain\Repository\RepositoryInterface;
use Sandbox\Core\Domain\Exception\NotFoundException;
use Sandbox\Security\Application\Tests\Units\TestCase;
use Sandbox\Security\Application\User\Command\GenerateJWTCommand;
use Sandbox\Security\Application\User\SecurityCommandHandler;
use Sandbox\Security\Domain\Role\Command\CreateRoleCommand;
use Sandbox\Security\Domain\Role\RoleId;
use Sandbox\Security\Domain\User\Command\CreateUserCommand;
use Sandbox\Security\Domain\User\ReadModel\User as ReadModelUser;
use Sandbox\Security\Domain\User\User;
use Sandbox\Security\Domain\User\UserId;

/**
 * SecurityCommandHandlerTests class.
 *
 * Generated by TestGenerator on 2018-04-03 at 17:28:01.
 */
class SecurityCommandHandlerTests extends TestCase
{
    use SettingSecurityContextTrait;

    /**
     * @return RepositoryInterface
     */
    protected function repository()
    {
        return $this->writeRepository(User::class);
    }

    /**
     * @param array $roles
     *
     * @return UserId
     */
    protected function addUser(array $roles)
    {
        $userId = UserId::next();
        $this->commandBus()->dispatch(
            new CreateUserCommand(
                $userId->toNative(),
                'johnsnow',
                'johnsnow',
                'johnsnow@gameofthrones.com',
                $roles,
                false
            )
        );

        return $userId;
    }

    /**
     * @return RoleId
     */
    protected function addRole()
    {
        $roleId = RoleId::next();
        $this->commandBus()->dispatch(
            new CreateRoleCommand(
                $roleId->toNative(),
                'admin',
                ['app']
            )
        );

        return $roleId;
    }

    /**
     * @param UserId $userId
     *
     * @return User
     */
    protected function getUserById(UserId $userId)
    {
        return $this->repository()->get($userId);
    }

    /**
     * {@inheritdoc}
     */
    public function testConstructor()
    {
        $this
            ->given(
                $securityCommandHandler = new SecurityCommandHandler(
                    $this->queryRepository(ReadModelUser::class),
                    $this->getTokenContext(),
                    $this->getTokenManager()
                )
            )
            ->then()
                ->object($securityCommandHandler)
                    ->isInstanceOf(SecurityCommandHandler::class)
        ;
    }

    /**
     * Test GenerateJWT method.
     */
    public function testGenerateJWT()
    {
        $this
            ->given($roleId = $this->addRole())
            ->and($userId = $this->addUser([$roleId->toNative()]))
            ->and($jwt = $this->getTokenContext()->getJWT())
            ->and(
                $command = new GenerateJWTCommand(
                    $userId->toNative()
                )
            )
            ->then()
                ->string($jwt)
                    ->isNotEmpty()
                ->string($this->getTokenContext()->getToken()->userId())
                    ->isNotEqualTo($userId->toNative())
                ->and()
                ->when($this->commandBus()->dispatch($command))
                ->then()
                    ->string($this->getTokenContext()->getJWT())
                        ->isNotEqualTo($jwt)
                    ->string($this->getTokenContext()->getToken()->userId())
                        ->isEqualTo($userId->toNative())
                    ->and()
                    ->then()
                        ->exception(function () {
                            $this->commandBus()->dispatch(
                                new GenerateJWTCommand(
                                    $this->faker->uuid
                                )
                            );
                        })->isInstanceOf(NotFoundException::class)
        ;
    }
}
