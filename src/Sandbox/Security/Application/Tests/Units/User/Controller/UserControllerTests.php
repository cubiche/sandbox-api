<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\Security\Application\Tests\Units\User\Controller;

use Cubiche\Domain\Repository\RepositoryInterface;
use Sandbox\Core\Application\Tests\Units\SettingTokenContextTrait;
use Sandbox\Security\Application\Role\Controller\RoleController;
use Sandbox\Security\Application\Tests\Units\TestCase;
use Sandbox\Security\Application\User\Controller\UserController as WriteModelController;
use Sandbox\Security\Application\User\ReadModel\Controller\UserController as ReadModelController;
use Sandbox\Security\Domain\User\User;
use Sandbox\Security\Domain\User\UserId;

/**
 * UserControllerTests class.
 *
 * Generated by TestGenerator on 2018-04-03 at 17:28:01.
 */
class UserControllerTests extends TestCase
{
    use SettingTokenContextTrait;

    /**
     * @return RepositoryInterface
     */
    protected function repository()
    {
        return $this->writeRepository(User::class);
    }

    /**
     * @return WriteModelController
     */
    protected function createWriteModelController()
    {
        return new WriteModelController($this->commandBus());
    }

    /**
     * @return ReadModelController
     */
    protected function createReadModelController()
    {
        return new ReadModelController($this->queryBus());
    }

    /**
     * @return string
     */
    protected function addRole()
    {
        $controller = new RoleController($this->commandBus());

        return $controller->createAction('ADMIN');
    }

    /**
     * @return UserId
     */
    protected function addUser($verificationByEmail = false)
    {
        $writeModelController = $this->createWriteModelController();
        $userId = $writeModelController->createAction(
            'jonsnow',
            'password',
            'jonsnow@gameofthrones.com',
            [],
            $verificationByEmail
        );

        return UserId::fromNative($userId);
    }

    /**
     * Test CreateAction method.
     */
    public function testCreateAction()
    {
        $this
            ->then()
                ->string($this->addUser()->toNative())
                    ->isNotEmpty()
        ;
    }

    /**
     * Test AddRoleAction method.
     */
    public function testAddRoleAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->and($roleId = $this->addRole())
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->integer($user->roles()->count())
                    ->isEqualTo(0)
                ->and()
                ->when($writeModelController->addRoleAction($userId->toNative(), $roleId))
                ->and($user = $this->repository()->get($userId))
                ->then()
                    ->integer($user->roles()->count())
                        ->isEqualTo(1)
        ;
    }

    /**
     * Test RemoveRoleAction method.
     */
    public function testRemoveRoleAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->and($roleId = $this->addRole())
            ->and($writeModelController->addRoleAction($userId->toNative(), $roleId))
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->integer($user->roles()->count())
                    ->isEqualTo(1)
                ->and()
                ->when($writeModelController->removeRoleAction($userId->toNative(), $roleId))
                ->and($user = $this->repository()->get($userId))
                ->then()
                    ->integer($user->roles()->count())
                        ->isEqualTo(0)
        ;
    }

    /**
     * Test ResetPasswordRequestAction method.
     */
    public function testResetPasswordRequestAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->variable($user->passwordResetToken())
                    ->isNull()
                ->and()
                ->when($writeModelController->resetPasswordRequestAction($user->email()->toNative()))
                ->and($user = $this->repository()->get($userId))
                    ->variable($user->passwordResetToken())
                        ->isNotNull()
        ;
    }

    /**
     * Test ResetPasswordAction method.
     */
    public function testResetPasswordAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->and($user = $this->repository()->get($userId))
            ->and($writeModelController->resetPasswordRequestAction($user->email()->toNative()))
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->variable($user->passwordResetToken())
                    ->isNotNull()
                ->and()
                ->when($writeModelController->resetPasswordAction($userId->toNative(), 'newpassword'))
                ->and($user = $this->repository()->get($userId))
                    ->variable($user->passwordResetToken())
                        ->isNull()
        ;
    }

    /**
     * Test VerifyAction method.
     */
    public function testVerifyAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser(true))
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->boolean($user->isVerified())
                    ->isFalse()
                ->and()
                ->when($writeModelController->verifyAction($user->emailVerificationToken()->toNative()))
                ->and($user = $this->repository()->get($userId))
                    ->boolean($user->isVerified())
                        ->isTrue()
        ;
    }

    /**
     * Test DisableAction method.
     */
    public function testDisableAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->boolean($user->isEnabled())
                    ->isTrue()
                ->and()
                ->when($writeModelController->disableAction($userId->toNative()))
                ->and($user = $this->repository()->get($userId))
                    ->boolean($user->isEnabled())
                        ->isFalse()
        ;
    }

    /**
     * Test EnableAction method.
     */
    public function testEnableAction()
    {
        /* @var User $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->addUser())
            ->and($writeModelController->disableAction($userId->toNative()))
            ->when($user = $this->repository()->get($userId))
            ->then()
                ->boolean($user->isEnabled())
                    ->isFalse()
                ->and()
                ->when($writeModelController->enableAction($userId->toNative()))
                ->and($user = $this->repository()->get($userId))
                    ->boolean($user->isEnabled())
                        ->isTrue()
        ;
    }
}
