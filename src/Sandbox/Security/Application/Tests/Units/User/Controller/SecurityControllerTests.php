<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\Security\Application\Tests\Units\User\Controller;

use Cubiche\Domain\Repository\QueryRepositoryInterface;
use Sandbox\Security\Application\Tests\Units\TestCase;
use Sandbox\Security\Application\Tests\Units\User\SettingSecurityContextTrait;
use Sandbox\Security\Application\User\Controller\SecurityController as WriteModelController;
use Sandbox\Security\Application\User\ReadModel\Controller\SecurityController as ReadModelController;
use Sandbox\Security\Domain\User\Command\CreateUserCommand;
use Sandbox\Security\Domain\User\ReadModel\User as ReadModelUser;
use Sandbox\Security\Domain\User\UserId;

/**
 * SecurityControllerTests class.
 *
 * Generated by TestGenerator on 2018-04-03 at 17:28:01.
 */
class SecurityControllerTests extends TestCase
{
    use SettingSecurityContextTrait;

    /**
     * @return QueryRepositoryInterface
     */
    protected function repository()
    {
        return $this->queryRepository(ReadModelUser::class);
    }

    /**
     * @return WriteModelController
     */
    protected function createWriteModelController()
    {
        return new WriteModelController($this->commandBus(), $this->getSecurityContext());
    }

    /**
     * @return WriteModelController
     */
    protected function createWriteModelControllerWithEmptyToken()
    {
        return new WriteModelController($this->commandBus(), $this->getEmptySecurityContext());
    }

    /**
     * @return ReadModelController
     */
    protected function createReadModelController()
    {
        return new ReadModelController($this->queryBus(), $this->getSecurityContext());
    }

    /**
     * @return string
     */
    protected function createUser()
    {
        $token = $this->getTokenContext()->getToken();

        $this->commandBus()->dispatch(
            new CreateUserCommand(
                $token->userId(),
                $this->faker->userName,
                'password',
                $token->email(),
                [],
                false
            )
        );

        return $token->userId();
    }

    /**
     * Test LoginAction method.
     */
    public function testLoginAction()
    {
        /* @var ReadModelUser $user */
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->createUser())
                ->then()
                    ->string($writeModelController->loginAction($this->faker->userName, 'abc123'))
                        ->isNotEmpty()
                ->and()
                ->when($this->getTokenContext()->setJWT(null))
                ->then()
                    ->variable($this->getSecurityContext()->getJWT())
                        ->isNull()
                    ->and()
                    ->when($user = $this->repository()->get(UserId::fromNative($userId)))
                    ->then()
                        ->string($writeModelController->loginAction($user->username()->toNative(), 'password'))
                            ->isNotEmpty()
        ;
    }

    /**
     * Test LogoutAction method.
     */
    public function testLogoutAction()
    {
        $this
            ->given($writeModelController = $this->createWriteModelController())
            ->and($userId = $this->createUser())
            ->then()
                ->boolean($writeModelController->logoutAction($userId))
                    ->isTrue()
            ->and()
            ->when($writeModelController = $this->createWriteModelControllerWithEmptyToken())
            ->then()
                ->boolean($writeModelController->logoutAction($this->getTokenContext()->getToken()->userId()))
                    ->isFalse()
        ;
    }
}
