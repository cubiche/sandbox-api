<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Application\Tests\Units\Mailer\Controller;

use Sandbox\Core\Application\Tests\Units\SettingTokenContextTrait;
use Sandbox\System\Application\Mailer\Controller\EmailController;
use Sandbox\System\Application\Tests\Units\TestCase;
use Sandbox\System\Domain\Mailer\Event\EmailWasSent;

/**
 * EmailControllerTests class.
 *
 * Generated by TestGenerator on 2018-02-15 at 10:51:52.
 */
class EmailControllerTests extends TestCase
{
    use SettingTokenContextTrait;

    /**
     * @return EmailController
     */
    protected function createController()
    {
        return new EmailController($this->commandBus(), $this->getTokenContext());
    }

    /**
     * Test SendAction method.
     */
    public function testSendAction()
    {
        $this
            ->given($controller = $this->createController())
            ->and($emailWasSent = null)
            ->and(
                $this->eventBus()->addListener(
                    EmailWasSent::class,
                    function (EmailWasSent $event) use (&$emailWasSent) {
                        $emailWasSent = $event;
                    },
                    100
                )
            )
            ->when(
                $wasSent = $controller->sendAction(
                    'app.user.register_confirmation',
                    array('ivan@cubiche.org'),
                    array('foo' => 'bar')
                )
            )
            ->then()
                ->boolean($wasSent)
                    ->isTrue()
                ->object($emailWasSent)
                    ->isInstanceOf(EmailWasSent::class)
                ->string($emailWasSent->code()->toNative())
                    ->isEqualTo('app.user.register_confirmation')
                ->string($emailWasSent->senderName()->toNative())
                    ->isEqualTo('Company Name')
                ->string($emailWasSent->senderAddress()->toNative())
                    ->isEqualTo('test@example.com')
                ->array($emailWasSent->recipients())
                    ->isEqualTo(array('ivan@cubiche.org'))
        ;
    }
}
