<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Application\Tests\Units\Currency\Controller;

use Sandbox\Core\Application\Tests\Units\SettingTokenContextTrait;
use Sandbox\System\Application\Currency\Controller\CurrencyController;
use Sandbox\System\Application\Tests\Units\TestCase;
use Sandbox\System\Domain\Currency\CurrencyCode;
use Sandbox\System\Domain\Currency\CurrencyId;
use Sandbox\System\Domain\Currency\ReadModel\Currency;
use Sandbox\System\Domain\Currency\ReadModel\Query\FindOneCurrencyByCode;
use Cubiche\Domain\Locale\LocaleCode;

/**
 * CurrencyControllerTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 19:27:41.
 */
class CurrencyControllerTests extends TestCase
{
    use SettingTokenContextTrait;

    /**
     * @return CurrencyController
     */
    protected function createController()
    {
        return new CurrencyController($this->commandBus(), $this->getTokenContext());
    }

    /**
     * @param string $currencyCode
     *
     * @return Currency
     */
    protected function findOneCurrency($currencyCode)
    {
        return $this->queryBus()->dispatch(new FindOneCurrencyByCode($currencyCode));
    }

    /**
     * Test CreateAction method.
     */
    public function testCreateAction()
    {
        $this
            ->given($controller = $this->createController())
            ->and($currencyCode = CurrencyCode::USD)
            ->and($currencySymbol = '$')
            ->and($translations = array('en_US' => 'Dollar', 'es_ES' => 'Dolar'))
            ->and($defaulLocale = LocaleCode::EN_US)
            ->when($currency = $this->findOneCurrency($currencyCode))
            ->then()
                ->variable($currency)
                    ->isNull()
                ->and()
                ->when(
                    $currencyId = $controller->createAction(
                        $currencyCode,
                        $currencySymbol,
                        $translations,
                        $defaulLocale
                    )
                )
                ->then()
                    ->string($currencyId)
                        ->isNotEmpty()
                    ->variable($currency = $this->findOneCurrency($currencyCode))
                        ->isNotNull()
                    ->string($currency->name()->translate(LocaleCode::EN_US()))
                        ->isEqualTo('Dollar')
                    ->string($currency->symbol()->toNative())
                        ->isEqualTo($currencySymbol)
        ;
    }

    /**
     * @return CurrencyId
     */
    private function addCurrency()
    {
        $controller = $this->createController();
        $id = $controller->createAction(
            CurrencyCode::USD,
            '$',
            array('en_US' => 'Dollar', 'es_ES' => 'Dolar'),
            LocaleCode::EN_US
        );

        return CurrencyId::fromNative($id);
    }

    private function repository()
    {
        return $this->queryRepository(Currency::class);
    }

    /**
     * Test disable/enable action method.
     */
    public function testEnableDisableAction()
    {
        /* @var Currency $currency */
        $this
            ->given($controller = $this->createController())
            ->and($currencyId = $this->addCurrency())
            ->then()
                ->variable($currency = $this->repository()->get($currencyId))
                    ->isNotNull()
                ->string($currency->name()->translate(LocaleCode::EN_US()))
                    ->isEqualTo('Dollar')
                ->boolean($currency->isEnabled())
                    ->isTrue()
            ->and()
            ->when($controller->disableAction($currencyId))
            ->then()
                ->variable($currency = $this->repository()->get($currencyId))
                    ->isNotNull()
                ->boolean($currency->isEnabled())
                    ->isFalse()
            ->and()
            ->when($controller->enableAction($currencyId))
            ->then()
                ->variable($currency = $this->repository()->get($currencyId))
                    ->isNotNull()
                ->boolean($currency->isEnabled())
                    ->isTrue()
        ;
    }

    /**
     * Test update name action method.
     */
    public function testUpdateNameAction()
    {
        /* @var Currency $currency */
        $this
            ->given($controller = $this->createController())
            ->and($currencyId = $this->addCurrency())
            ->and($currency = $this->repository()->get($currencyId))
            ->and($name = array('en_US' => 'Pound', 'es_ES' => 'Libra'))
            ->then()
                ->array($currency->name()->toArray())
                    ->isNotEqualTo($name)
            ->and()
            ->when($controller->updateNameAction($currencyId->toNative(), $name))
            ->and($currency = $this->repository()->get($currencyId))
            ->then()
                ->array($currency->name()->toArray())
                    ->isEqualTo($name)
        ;
    }
}
