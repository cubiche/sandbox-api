<?php

/**
 * This file is part of the Sandbox/Application component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Application\Tests\Units\Currency\ReadModel\Controller;

use Sandbox\Core\Application\Tests\Units\SettingTokenContextTrait;
use Sandbox\System\Application\Currency\ReadModel\Controller\CurrencyController;
use Sandbox\System\Application\Tests\Units\TestCase;
use Sandbox\System\Domain\Currency\CurrencyCode;
use Sandbox\System\Domain\Currency\CurrencyId;
use Sandbox\System\Domain\Currency\ReadModel\Currency;
use Cubiche\Domain\Locale\LocaleCode;
use Cubiche\Domain\Localizable\LocalizableString;
use Cubiche\Domain\System\StringLiteral;

/**
 * CurrencyControllerTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 19:27:41.
 */
class CurrencyControllerTests extends TestCase
{
    use SettingTokenContextTrait;

    /**
     * @return CurrencyController
     */
    protected function createController()
    {
        return new CurrencyController($this->queryBus(), $this->getTokenContext());
    }

    /**
     * Test FindOneByCodeAction method.
     */
    public function testFindOneByCodeAction()
    {
        $this
            ->given($controller = $this->createController())
            ->and($currencyCode = CurrencyCode::USD)
            ->and($repository = $this->queryRepository(Currency::class))
            ->when($currency = $controller->findOneByCodeAction($currencyCode))
            ->then()
                ->variable($currency)
                    ->isNull()
                ->and()
                ->when(
                    $repository->persist(
                        new Currency(
                            CurrencyId::next(),
                            LocalizableString::fromArray(array('en_US' => 'Dollar', 'es_ES' => 'Dolar')),
                            StringLiteral::fromNative(CurrencyCode::USD),
                            StringLiteral::fromNative('$')
                        )
                    )
                )
                ->then()
                    ->variable($currency = $controller->findOneByCodeAction($currencyCode))
                        ->isNotNull()
                    ->string($currency->name()->translate(LocaleCode::EN_US()))
                        ->isEqualTo('Dollar')
        ;
    }

    /**
     * Test findAllAction method.
     */
    public function testFindAllAction()
    {
        $this
            ->given($controller = $this->createController())
            ->and($repository = $this->queryRepository(Currency::class))
            ->then()
                ->array(iterator_to_array($controller->findAllAction()))
                    ->isEmpty()
                ->and()
                ->when(
                    $repository->persist(
                        new Currency(
                            CurrencyId::next(),
                            LocalizableString::fromArray(array('en_US' => 'Dollar', 'es_ES' => 'Dolar')),
                            StringLiteral::fromNative(CurrencyCode::USD),
                            StringLiteral::fromNative('$')
                        )
                    )
                )
                ->and(
                    $repository->persist(
                        new Currency(
                            CurrencyId::next(),
                            LocalizableString::fromArray(array('en_US' => 'Euro', 'es_ES' => 'Euro')),
                            StringLiteral::fromNative(CurrencyCode::EUR),
                            StringLiteral::fromNative('â‚¬')
                        )
                    )
                )
                ->then()
                    ->array(iterator_to_array($controller->findAllAction()))
                        ->isNotEmpty()
                        ->hasSize(2)
        ;
    }
}
