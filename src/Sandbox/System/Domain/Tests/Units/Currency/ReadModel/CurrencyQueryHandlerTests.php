<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units\Currency\ReadModel;

use Sandbox\System\Domain\Currency\CurrencyCode;
use Sandbox\System\Domain\Currency\CurrencyId;
use Sandbox\System\Domain\Currency\ReadModel\Currency;
use Sandbox\System\Domain\Currency\ReadModel\Query\FindAllCurrencies;
use Sandbox\System\Domain\Currency\ReadModel\Query\FindOneCurrencyByCode;
use Sandbox\System\Domain\Tests\Units\TestCase;
use Cubiche\Domain\Localizable\LocalizableString;
use Cubiche\Domain\System\StringLiteral;

/**
 * CurrencyQueryHandlerTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 17:26:31.
 */
class CurrencyQueryHandlerTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function addEuroCurrencyToRepository()
    {
        $repository = $this->queryRepository(Currency::class);

        $repository->persist(
            new Currency(
                CurrencyId::next(),
                LocalizableString::fromArray(array('en_US' => 'Euro', 'es_ES' => 'Euro')),
                StringLiteral::fromNative(CurrencyCode::EUR),
                StringLiteral::fromNative('â‚¬')
            )
        );
    }

    /**
     * {@inheritdoc}
     */
    protected function addDollarCurrencyToRepository()
    {
        $repository = $this->queryRepository(Currency::class);

        $repository->persist(
            new Currency(
                CurrencyId::next(),
                LocalizableString::fromArray(array('en_US' => 'Dollar', 'es_ES' => 'Dolar')),
                StringLiteral::fromNative(CurrencyCode::USD),
                StringLiteral::fromNative('$')
            )
        );
    }

    /**
     * Test FindOneCurrencyByCode method.
     */
    public function testFindOneCurrencyByCode()
    {
        $this
            ->given($query = new FindOneCurrencyByCode(CurrencyCode::USD))
            ->then()
                ->variable($this->queryBus()->dispatch($query))
                    ->isNull()
                ->and()
                ->when($this->addEuroCurrencyToRepository())
                ->then()
                    ->variable($this->queryBus()->dispatch($query))
                        ->isNull()
                    ->and()
                    ->when($this->addDollarCurrencyToRepository())
                    ->then()
                        ->object($this->queryBus()->dispatch($query))
                            ->isInstanceOf(Currency::class)
        ;
    }

    /**
     * Test FindAllCurrencies method.
     */
    public function testFindAllCurrencies()
    {
        $this
            ->given($query = new FindAllCurrencies())
            ->then()
                ->array(iterator_to_array($this->queryBus()->dispatch($query)))
                    ->isEmpty()
                ->and()
                ->when($this->addEuroCurrencyToRepository())
                ->and($this->addDollarCurrencyToRepository())
                ->then()
                    ->array(iterator_to_array($this->queryBus()->dispatch($query)))
                        ->isNotEmpty()
                        ->hasSize(2)
        ;
    }
}
