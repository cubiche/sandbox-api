<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units\Currency;

use Sandbox\Core\Domain\Exception\NotFoundException;
use Sandbox\System\Domain\Currency\Command\CreateCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\DisableCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\EnableCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\UpdateCurrencyNameCommand;
use Sandbox\System\Domain\Currency\Currency;
use Sandbox\System\Domain\Currency\CurrencyCode;
use Sandbox\System\Domain\Currency\CurrencyId;
use Sandbox\System\Domain\Tests\Units\TestCase;
use Cubiche\Domain\Locale\LocaleCode;

/**
 * CurrencyCommandHandlerTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 17:26:31.
 */
class CurrencyCommandHandlerTests extends TestCase
{
    private function addCurrency()
    {
        $currencyId = CurrencyId::next();

        $this->commandBus()->dispatch(new CreateCurrencyCommand(
            $currencyId->toNative(),
            CurrencyCode::USD,
            '$',
            array('en_US' => 'Dollar', 'es_ES' => 'Dolar')
        ));

        return $currencyId;
    }

    private function repository()
    {
        return $this->writeRepository(Currency::class);
    }

    /**
     * Test createCurrency method.
     */
    public function testCreateCurrency()
    {
        $this
            ->given($currencyId = CurrencyId::next())
            ->and(
                $command = new CreateCurrencyCommand(
                    $currencyId->toNative(),
                    CurrencyCode::USD,
                    '$',
                    array('en_US' => 'Dollar', 'es_ES' => 'Dolar')
                )
            )
            ->then()
                ->variable($this->repository()->get($currencyId))
                    ->isNull()
                ->and()
                ->when($this->commandBus()->dispatch($command))
                ->then()
                    ->object($currency = $this->repository()->get($currencyId))
                        ->isInstanceOf(Currency::class)
                    ->string($currency->name()->translate(LocaleCode::ES_ES()))
                        ->isEqualTo('Dolar')
        ;
    }

    /**
     * Test enable/disable method.
     */
    public function testEnableDisableCurrency()
    {
        /* @var Currency $currency */
        $this
            ->given($currencyId = $this->addCurrency())
            ->then()
                ->object($currency = $this->repository()->get($currencyId))
                    ->isInstanceOf(Currency::class)
                ->boolean($currency->isEnabled())
                    ->isTrue()
                ->and()
                ->when(
                    $this->commandBus()->dispatch(new DisableCurrencyCommand(
                        $currencyId->toNative()
                    ))
                )
                ->then()
                    ->boolean($this->repository()->get($currencyId)->isEnabled())
                        ->isFalse()
                    ->exception(function () {
                        $this->commandBus()->dispatch(new DisableCurrencyCommand(
                            CurrencyId::next()
                        ));
                    })->isInstanceOf(NotFoundException::class)
                    ->and()
                    ->when(
                        $this->commandBus()->dispatch(new EnableCurrencyCommand(
                            $currencyId->toNative()
                        ))
                    )
                    ->and($currency = $this->repository()->get($currencyId))
                    ->then()
                        ->boolean($currency->isEnabled())
                            ->isTrue()
        ;
    }

    /**
     * Test UpdateCurrencyName method.
     */
    public function testUpdateCurrencyName()
    {
        /* @var Currency $currency */
        $this
            ->given($currencyId = $this->addCurrency())
            ->and($currency = $this->repository()->get($currencyId))
            ->and($name = array('en_US' => 'Pound', 'es_ES' => 'Libra'))
            ->then()
                ->array($currency->name()->toArray())
                    ->isNotEqualTo($name)
            ->when(
                $this->commandBus()->dispatch(
                    new UpdateCurrencyNameCommand(
                        $currencyId->toNative(),
                        $name
                    )
                )
            )
            ->and($currency = $this->repository()->get($currencyId))
            ->then()
                ->array($currency->name()->toArray())
                    ->isEqualTo($name)
        ;
    }
}
