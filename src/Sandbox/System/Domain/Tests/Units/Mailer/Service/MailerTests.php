<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units\Mailer\Service;

use Sandbox\System\Domain\Mailer\Event\EmailWasSent;
use Sandbox\System\Domain\Tests\Units\TestCase;
use Cubiche\Domain\System\StringLiteral;

/**
 * MailerTests class.
 *
 * Generated by TestGenerator on 2018-02-15 at 10:51:52.
 */
class MailerTests extends TestCase
{
    /**
     * Test Send method.
     */
    public function testSend()
    {
        $this
            ->given($mailer = $this->mailer())
            ->and($code = 'app.user.reset_password')
            ->and($emailWasSent = null)
            ->and(
                $this->eventBus()->addListener(
                    EmailWasSent::class,
                    function (EmailWasSent $event) use (&$emailWasSent) {
                        $emailWasSent = $event;
                    },
                    100
                )
            )
            ->when(
                $mailer->send(
                    StringLiteral::fromNative($code),
                    array('ivannis.suarez@gmail.com'),
                    array('foo' => 'bar'),
                    array()
                )
            )
            ->then()
                ->object($emailWasSent)
                    ->isInstanceOf(EmailWasSent::class)
                ->string($emailWasSent->code()->toNative())
                    ->isEqualTo($code)
                ->string($emailWasSent->senderName()->toNative())
                    ->isEqualTo('Company Name')
                ->string($emailWasSent->senderAddress()->toNative())
                    ->isEqualTo('test@example.com')
                ->array($emailWasSent->recipients())
                    ->isEqualTo(array('ivannis.suarez@gmail.com'))
        ;

        $this
            ->given($mailer = $this->mailer(false))
            ->and($code = 'app.user.reset_password')
            ->and($emailWasSent = null)
            ->and(
                $this->eventBus()->addListener(
                    EmailWasSent::class,
                    function (EmailWasSent $event) use (&$emailWasSent) {
                        $emailWasSent = $event;
                    },
                    100
                )
            )
            ->when(
                $mailer->send(
                    StringLiteral::fromNative($code),
                    array('ivannis.suarez@gmail.com'),
                    array('foo' => 'bar'),
                    array()
                )
            )
            ->then()
                ->variable($emailWasSent)
                    ->isNull()
        ;
    }
}
