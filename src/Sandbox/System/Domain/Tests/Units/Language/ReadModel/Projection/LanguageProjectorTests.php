<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units\Language\ReadModel\Projection;

use Sandbox\Core\Domain\Exception\NotFoundException;
use Sandbox\System\Domain\Language\Command\CreateLanguageCommand;
use Sandbox\System\Domain\Language\Command\DisableLanguageCommand;
use Sandbox\System\Domain\Language\Command\EnableLanguageCommand;
use Sandbox\System\Domain\Language\Command\UpdateLanguageNameCommand;
use Sandbox\System\Domain\Language\Event\LanguageWasEnabled;
use Sandbox\System\Domain\Language\Language;
use Sandbox\System\Domain\Language\LanguageId;
use Sandbox\System\Domain\Language\ReadModel\Language as ReadModelLanguage;
use Sandbox\System\Domain\Language\ReadModel\Projection\LanguageProjector;
use Sandbox\System\Domain\Tests\Units\TestCase;
use Cubiche\Domain\EventPublisher\DomainEventPublisher;
use Cubiche\Domain\EventSourcing\ReadModelInterface;
use Cubiche\Domain\Locale\LanguageCode;

/**
 * LanguageProjectorTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 17:26:00.
 */
class LanguageProjectorTests extends TestCase
{
    /**
     * Test create method.
     */
    public function testCreate()
    {
        $this
            ->given(
                $projector = new LanguageProjector(
                    $this->queryRepository(ReadModelLanguage::class)
                )
            )
            ->then()
                ->array($projector->getSubscribedEvents())
                    ->isNotEmpty()
        ;
    }

    private function repository()
    {
        return $this->queryRepository(ReadModelLanguage::class);
    }

    private function addLanguage()
    {
        $languageId = LanguageId::next();

        $this->commandBus()->dispatch(new CreateLanguageCommand(
            $languageId->toNative(),
            LanguageCode::EN,
            array('en_US' => 'English', 'es_ES' => 'Ingles')
        ));

        return $languageId;
    }

    /**
     * Test WhenLanguageWasCreated method.
     */
    public function testWhenLanguageWasCreated()
    {
        $this
            ->then()
                ->boolean($this->repository()->isEmpty())
                    ->isTrue()
            ->and()
            ->when($languageId = $this->addLanguage())
            ->then()
                ->boolean($this->repository()->isEmpty())
                    ->isFalse()
                ->object($this->repository()->get($languageId))
                    ->isInstanceOf(ReadModelInterface::class)
        ;
    }

    /**
     * Test WhenLanguageNameWasUpdated method.
     */
    public function testWhenLanguageNameWasUpdated()
    {
        /* @var ReadModelLanguage $language */
        $this
            ->given($languageId = $this->addLanguage())
            ->and($language = $this->repository()->get($languageId))
            ->and($name = array('en_US' => 'Spanish', 'es_ES' => 'EspaÃ±ol'))
            ->then()
                ->array($language->name()->toArray())
                    ->isNotEqualTo($name)
            ->and()
            ->when(
                $this->commandBus()->dispatch(
                    new UpdateLanguageNameCommand(
                        $languageId->toNative(),
                        $name
                    )
                )
            )
            ->and($language = $this->repository()->get($languageId))
            ->then()
                ->array($language->name()->toArray())
                    ->isEqualTo($name)
        ;
    }

    /**
     * Test when language was Enabled/Disabled method.
     */
    public function testWhenLanguageWasEnabledDisabled()
    {
        /* @var ReadModelLanguage $language */
        $this
            ->given($languageId = $this->addLanguage())
            ->then()
                ->object($language = $this->repository()->get($languageId))
                    ->isInstanceOf(ReadModelLanguage::class)
                ->boolean($language->isEnabled())
                    ->isTrue()
            ->and()
            ->when($this->commandBus()->dispatch(new DisableLanguageCommand($languageId->toNative())))
            ->then()
                ->object($language = $this->repository()->get($languageId))
                    ->isInstanceOf(ReadModelLanguage::class)
                ->boolean($language->isEnabled())
                    ->isFalse()
            ->and()
            ->when($this->commandBus()->dispatch(new EnableLanguageCommand($languageId->toNative())))
            ->then()
                ->object($language = $this->repository()->get($languageId))
                    ->isInstanceOf(ReadModelLanguage::class)
                ->boolean($language->isEnabled())
                    ->isTrue()
        ;
    }

    public function testNoExistingCurrency()
    {
        $this
            ->given($languageId = LanguageId::next())
            ->then()
                ->exception(function () use ($languageId) {
                    DomainEventPublisher::publish(new LanguageWasEnabled($languageId));
                })
                ->isInstanceOf(NotFoundException::class)
        ;
    }
}
