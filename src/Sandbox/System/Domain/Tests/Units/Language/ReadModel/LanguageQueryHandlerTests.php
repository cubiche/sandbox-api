<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units\Language\ReadModel;

use Sandbox\System\Domain\Language\LanguageId;
use Sandbox\System\Domain\Language\ReadModel\Language;
use Sandbox\System\Domain\Language\ReadModel\Query\FindAllLanguages;
use Sandbox\System\Domain\Language\ReadModel\Query\FindOneLanguageByCode;
use Sandbox\System\Domain\Tests\Units\TestCase;
use Cubiche\Domain\Locale\LanguageCode;
use Cubiche\Domain\Localizable\LocalizableString;

/**
 * LanguageQueryHandlerTests class.
 *
 * Generated by TestGenerator on 2018-01-25 at 17:26:00.
 */
class LanguageQueryHandlerTests extends TestCase
{
    /**
     * {@inheritdoc}
     */
    protected function addEnglishLanguageToRepository()
    {
        $repository = $this->queryRepository(Language::class);

        $repository->persist(
            new Language(
                LanguageId::next(),
                LocalizableString::fromArray(array('en_US' => 'English', 'es_ES' => 'Ingles')),
                LanguageCode::EN()
            )
        );
    }

    /**
     * {@inheritdoc}
     */
    protected function addSpanishLanguageToRepository()
    {
        $repository = $this->queryRepository(Language::class);

        $repository->persist(
            new Language(
                LanguageId::next(),
                LocalizableString::fromArray(array('en_US' => 'Spanish', 'es_ES' => 'EspaÃ±ol')),
                LanguageCode::ES()
            )
        );
    }

    /**
     * Test FindOneLanguageByCode method.
     */
    public function testFindOneLanguageByCode()
    {
        $this
            ->given($query = new FindOneLanguageByCode(LanguageCode::ES))
            ->then()
                ->variable($this->queryBus()->dispatch($query))
                    ->isNull()
                ->and()
                ->when($this->addEnglishLanguageToRepository())
                ->then()
                    ->variable($this->queryBus()->dispatch($query))
                        ->isNull()
                    ->and()
                    ->when($this->addSpanishLanguageToRepository())
                    ->then()
                        ->object($this->queryBus()->dispatch($query))
                            ->isInstanceOf(Language::class)
        ;
    }

    /**
     * Test FindAllLanguages method.
     */
    public function testFindAllLanguages()
    {
        $this
            ->given($query = new FindAllLanguages())
            ->then()
                ->array(iterator_to_array($this->queryBus()->dispatch($query)))
                    ->isEmpty()
                ->and()
                ->when($this->addEnglishLanguageToRepository())
                ->and($this->addSpanishLanguageToRepository())
                ->then()
                    ->array($languages = iterator_to_array($this->queryBus()->dispatch($query)))
                        ->isNotEmpty()
                        ->hasSize(2)
        ;
    }
}
