<?php

/**
 * This file is part of the Sandbox application.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sandbox\System\Domain\Tests\Units;

use Sandbox\Core\Domain\Tests\Units\SettingCommandBusTrait;
use Sandbox\Core\Domain\Tests\Units\SettingEventBusTrait;
use Sandbox\Core\Domain\Tests\Units\SettingProjectorTrait;
use Sandbox\Core\Domain\Tests\Units\SettingQueryRepositoryTrait;
use Sandbox\Core\Domain\Tests\Units\SettingWriteRepositoryTrait;
use Sandbox\Core\Domain\Tests\Units\TestCase as BaseTestCase;
use Sandbox\System\Domain\Country\Command\CreateCountryCommand;
use Sandbox\System\Domain\Country\Country;
use Sandbox\System\Domain\Country\CountryCommandHandler;
use Sandbox\System\Domain\Country\ReadModel\Country as ReadModelCountry;
use Sandbox\System\Domain\Country\ReadModel\CountryQueryHandler;
use Sandbox\System\Domain\Country\ReadModel\Projection\CountryProjector;
use Sandbox\System\Domain\Country\ReadModel\Query\FindAllCountries;
use Sandbox\System\Domain\Country\ReadModel\Query\FindOneCountryByCode;
use Sandbox\System\Domain\Country\Validator\Asserter as CountryAsserter;
use Sandbox\System\Domain\Currency\Command\CreateCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\DisableCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\EnableCurrencyCommand;
use Sandbox\System\Domain\Currency\Command\UpdateCurrencyNameCommand;
use Sandbox\System\Domain\Currency\Currency;
use Sandbox\System\Domain\Currency\CurrencyCommandHandler;
use Sandbox\System\Domain\Currency\ReadModel\Currency as ReadModelCurrency;
use Sandbox\System\Domain\Currency\ReadModel\CurrencyQueryHandler;
use Sandbox\System\Domain\Currency\ReadModel\Projection\CurrencyProjector;
use Sandbox\System\Domain\Currency\ReadModel\Query\FindAllCurrencies;
use Sandbox\System\Domain\Currency\ReadModel\Query\FindOneCurrencyByCode;
use Sandbox\System\Domain\Currency\Validator\Asserter as CurrencyAsserter;
use Sandbox\System\Domain\Language\Command\CreateLanguageCommand;
use Sandbox\System\Domain\Language\Command\DisableLanguageCommand;
use Sandbox\System\Domain\Language\Command\EnableLanguageCommand;
use Sandbox\System\Domain\Language\Command\UpdateLanguageNameCommand;
use Sandbox\System\Domain\Language\Language;
use Sandbox\System\Domain\Language\LanguageCommandHandler;
use Sandbox\System\Domain\Language\ReadModel\Language as ReadModelLanguage;
use Sandbox\System\Domain\Language\ReadModel\LanguageQueryHandler;
use Sandbox\System\Domain\Language\ReadModel\Projection\LanguageProjector;
use Sandbox\System\Domain\Language\ReadModel\Query\FindAllLanguages;
use Sandbox\System\Domain\Language\ReadModel\Query\FindOneLanguageByCode;
use Sandbox\System\Domain\Language\Validator\Asserter as LanguageAsserter;
use Sandbox\System\Domain\Mailer\Command\SendEmailCommand;
use Sandbox\System\Domain\Mailer\EmailCommandHandler;
use Sandbox\System\Domain\Tests\Units\Mailer\SettingMailerTrait;
use Cubiche\Core\Validator\Validator;
use Cubiche\Domain\EventPublisher\DomainEventPublisher;

/**
 * TestCase class.
 *
 * Generated by TestGenerator on 2018-01-25 at 17:26:00.
 */
class TestCase extends BaseTestCase
{
    use SettingCommandBusTrait;
    use SettingWriteRepositoryTrait;
    use SettingQueryRepositoryTrait;
    use SettingEventBusTrait, SettingProjectorTrait {
        SettingEventBusTrait::eventDispatcher insteadof SettingProjectorTrait;
    }
    use SettingMailerTrait;

    /**
     * {@inheritdoc}
     */
    public function beforeTestMethod($method)
    {
        DomainEventPublisher::set($this->eventBus());
        $this->registerValidatorAsserters();
    }

    /**
     * {@inheritdoc}
     */
    protected function registerValidatorAsserters()
    {
        parent::registerValidatorAsserters();

        $countryAsserter = new CountryAsserter($this->queryBus());
        $currencyAsserter = new CurrencyAsserter($this->queryBus());
        $languageAsserter = new LanguageAsserter($this->queryBus());

        Validator::registerValidator('uniqueCountryCode', array($countryAsserter, 'uniqueCountryCode'));
        Validator::registerValidator('currencyCode', array($currencyAsserter, 'currencyCode'));
        Validator::registerValidator('uniqueCurrencyCode', array($currencyAsserter, 'uniqueCurrencyCode'));
        Validator::registerValidator('uniqueLanguageCode', array($languageAsserter, 'uniqueLanguageCode'));
    }

    /**
     * @return array
     */
    protected function commandHandlers()
    {
        $languageCommandHandler = new LanguageCommandHandler($this->writeRepository(Language::class));
        $currencyCommandHandler = new CurrencyCommandHandler($this->writeRepository(Currency::class));
        $emailCommandHandler = new EmailCommandHandler($this->mailer());
        $countryCommandHandler = new CountryCommandHandler($this->writeRepository(Country::class));

        return array(
            CreateLanguageCommand::class => $languageCommandHandler,
            UpdateLanguageNameCommand::class => $languageCommandHandler,
            DisableLanguageCommand::class => $languageCommandHandler,
            EnableLanguageCommand::class => $languageCommandHandler,
            CreateCurrencyCommand::class => $currencyCommandHandler,
            UpdateCurrencyNameCommand::class => $currencyCommandHandler,
            DisableCurrencyCommand::class => $currencyCommandHandler,
            EnableCurrencyCommand::class => $currencyCommandHandler,
            SendEmailCommand::class => $emailCommandHandler,
            CreateCountryCommand::class => $countryCommandHandler,
        );
    }

    /**
     * @return array
     */
    protected function commandValidatorHandlers()
    {
        return array();
    }

    /**
     * @return array
     */
    protected function queryHandlers()
    {
        $languageQueryHandler = new LanguageQueryHandler($this->queryRepository(ReadModelLanguage::class));
        $currencyQueryHandler = new CurrencyQueryHandler($this->queryRepository(ReadModelCurrency::class));
        $countryQueryHandler = new CountryQueryHandler($this->queryRepository(ReadModelCountry::class));

        return array(
            FindAllLanguages::class => $languageQueryHandler,
            FindOneLanguageByCode::class => $languageQueryHandler,
            FindAllCurrencies::class => $currencyQueryHandler,
            FindOneCurrencyByCode::class => $currencyQueryHandler,
            FindAllCountries::class => $countryQueryHandler,
            FindOneCountryByCode::class => $countryQueryHandler,
        );
    }

    /**
     * @return array
     */
    protected function queryValidatorHandlers()
    {
        return array();
    }

    /**
     * @return array
     */
    protected function eventSubscribers()
    {
        $languageProjector = new LanguageProjector(
            $this->queryRepository(ReadModelLanguage::class)
        );

        $currencyProjector = new CurrencyProjector(
            $this->queryRepository(ReadModelCurrency::class)
        );

        $countryProjector = new CountryProjector(
            $this->queryRepository(ReadModelCountry::class)
        );

        return array(
            $languageProjector,
            $currencyProjector,
            $countryProjector,
        );
    }
}
